{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"https://gist.github.com/ayulockin/c53e9b3c1e804a05c05360807d88220a#file-how-to-use-lstm-for-one-to-many-many-to-one-and-many-to-many-sequences-ipynb","timestamp":1688622297688}],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"markdown","source":["The code in this colab notebook is heavily referenced from this [blog post by Usman Malik](https://stackabuse.com/solving-sequence-problems-with-lstm-in-keras-part-2/)."],"metadata":{"id":"XVBx-edtm4di"}},{"cell_type":"markdown","source":["# Imports and Setups"],"metadata":{"id":"79soaii8iRvz"}},{"cell_type":"code","source":["!pip install -qq wandb"],"metadata":{"id":"2PK-_DTZiVJM"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ylFg6ScZhtsC"},"outputs":[],"source":["import tensorflow as tf\n","from tensorflow.keras import layers\n","from tensorflow.keras import models\n","\n","import numpy as np"]},{"cell_type":"markdown","source":["Create a Weigts and Biases account if you don't already have one: https://wandb.ai/signup\n","\n","Copy and paste the API token in the input box below: https://wandb.ai/authorize"],"metadata":{"id":"rnS8RPAhiYr-"}},{"cell_type":"code","source":["import wandb\n","from wandb.keras import WandbMetricsLogger\n","\n","wandb.login()"],"metadata":{"id":"sJlSUU8-iRFW"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# One to Many Sequence"],"metadata":{"id":"1rh5St_dmvN2"}},{"cell_type":"markdown","source":["## Data"],"metadata":{"id":"SGjmB-nFjpqt"}},{"cell_type":"code","source":["X, Y = [], []\n","X = [x+3 for x in range(-2, 43, 3)]\n","\n","for i in X:\n","    output_vector = []\n","    output_vector.append(i+1)\n","    output_vector.append(i+2)\n","    Y.append(output_vector)\n","\n","print(X)\n","print(Y)"],"metadata":{"id":"YlFW50w5iuZi"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Let's reshape the input sequence to be of the shape `[batch, timesteps, feature]`."],"metadata":{"id":"VMq6ncUvjZ0E"}},{"cell_type":"code","source":["X = np.array(X).reshape(15, 1, 1)\n","Y = np.array(Y)\n","\n","print(f\"Shape of X: {X.shape} and shape of Y: {Y.shape}\")"],"metadata":{"id":"kBILu-HLizUO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Model"],"metadata":{"id":"H9Vi3jacjrWN"}},{"cell_type":"code","source":["def get_model():\n","    inputs = layers.Input(shape=(1,1))\n","    lstm = layers.LSTM(50, activation=\"relu\")(inputs)\n","    outputs = layers.Dense(2)(lstm)\n","\n","    model = models.Model(inputs, outputs)\n","\n","    model.compile(optimizer='adam', loss='mse')\n","\n","    return model\n","\n","tf.keras.backend.clear_session()\n","model = get_model()\n","model.summary()"],"metadata":{"id":"uCs4l_3yizSR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Train with W&B"],"metadata":{"id":"fGduYVZGlaml"}},{"cell_type":"code","source":["run = wandb.init(project=\"lstm-keras\")\n","\n","_ = model.fit(X, Y, epochs=1000, validation_split=0.2, batch_size=3, callbacks=[WandbMetricsLogger(log_freq=2)])\n","\n","run.finish()"],"metadata":{"id":"RdwnWkHuizQR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Prediction"],"metadata":{"id":"aB3njgNqmR93"}},{"cell_type":"code","source":["test_input = np.array([10])\n","test_input = test_input.reshape((1, 1, 1))\n","test_output = model.predict(test_input)\n","print(test_output)"],"metadata":{"id":"TEircyJ0ltxx"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Many to One Sequence"],"metadata":{"id":"7XPu29qcnGyn"}},{"cell_type":"markdown","source":["## Data"],"metadata":{"id":"g3yHigjpnwlA"}},{"cell_type":"code","source":["X = np.array([x+1 for x in range(45)])\n","X = X.reshape(15,3,1)\n","\n","Y = []\n","for x in X:\n","    Y.append(x.sum())\n","Y = np.array(Y)\n","\n","print(X)\n","print(Y)"],"metadata":{"id":"8Cq40Enam1Wo"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Model"],"metadata":{"id":"qS1U7Y5WoDpO"}},{"cell_type":"code","source":["def get_model():\n","    inputs = layers.Input(shape=(3,1))\n","    lstm = layers.LSTM(50, activation=\"relu\")(inputs)\n","    outputs = layers.Dense(1)(lstm)\n","\n","    model = models.Model(inputs, outputs)\n","\n","    model.compile(optimizer='adam', loss='mse')\n","\n","    return model\n","\n","tf.keras.backend.clear_session()\n","model = get_model()\n","model.summary()"],"metadata":{"id":"6YMVvu1sm1Ul"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Train"],"metadata":{"id":"9MAIkcxkpvlP"}},{"cell_type":"code","source":["run = wandb.init(project=\"lstm-keras\")\n","\n","_ = model.fit(X, Y, epochs=1000, validation_split=0.2, verbose=1, callbacks=[WandbMetricsLogger(log_freq=2)])\n","\n","run.finish()"],"metadata":{"id":"GvUujlDKm1Tu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Prediction"],"metadata":{"id":"pvWv6YKGptfB"}},{"cell_type":"code","source":["test_input = np.array([50,51,52])\n","test_input = test_input.reshape((1, 3, 1))\n","test_output = model.predict(test_input, verbose=0)\n","print(test_output)"],"metadata":{"id":"yrdZBm5Jm1Sj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Many to Many Sequence"],"metadata":{"id":"rqmG-llcp3Ui"}},{"cell_type":"markdown","source":["## Data"],"metadata":{"id":"NpD7myH7xnc3"}},{"cell_type":"code","source":["X = list()\n","Y = list()\n","X = [x for x in range(5, 301, 5)]\n","Y = [y for y in range(20, 316, 5)]\n","\n","X = np.array(X).reshape(20, 3, 1)\n","Y = np.array(Y).reshape(20, 3, 1)\n","\n","print(X)\n","print(Y)"],"metadata":{"id":"O46R4ttMmWeE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Model"],"metadata":{"id":"qBT3fNa5p-q8"}},{"cell_type":"code","source":["def get_model():\n","    inputs = layers.Input(shape=(3,1))\n","    encoder = layers.LSTM(100, activation=\"relu\", return_sequences=False)(inputs)\n","    repeat = layers.RepeatVector(3)(encoder)\n","    decoder = layers.LSTM(100, activation='relu', return_sequences=True)(repeat)\n","    outputs = layers.TimeDistributed(layers.Dense(1))(decoder)\n","\n","    model = models.Model(inputs, outputs)\n","\n","    model.compile(optimizer='adam', loss='mse')\n","\n","    return model\n","\n","tf.keras.backend.clear_session()\n","model = get_model()\n","model.summary()"],"metadata":{"id":"Y6UNQbYip9mT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Train"],"metadata":{"id":"FF1vJmHYxo50"}},{"cell_type":"code","source":["run = wandb.init(project=\"lstm-keras\")\n","\n","_ = model.fit(X, Y, epochs=1000, validation_split=0.2, verbose=1, batch_size=3, callbacks=[WandbMetricsLogger(log_freq=2)])\n","\n","run.finish()"],"metadata":{"id":"efVLk0fyu2L8"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Prediction"],"metadata":{"id":"j3wPQXLWxqH7"}},{"cell_type":"code","source":["test_input = np.array([300, 305, 310])\n","test_input = test_input.reshape((1, 3, 1))\n","test_output = model.predict(test_input, verbose=0)\n","print(test_output)"],"metadata":{"id":"lovky1ZMviH_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"lY9oHcCewLta"},"execution_count":null,"outputs":[]}]}